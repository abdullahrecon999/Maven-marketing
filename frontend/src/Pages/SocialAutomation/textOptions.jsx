import React, { useState, useContext, useRef, useEffect } from "react";
import { NavBar } from "../../Components/brandComponents/navbar";
import { motion, AnimatePresence } from "framer-motion"
import { Select, Dropdown, Button, Modal, Avatar, Popover, DatePicker, Menu, Drawer } from 'antd';
import SimpleMDE from "react-simplemde-editor";
import "easymde/dist/easymde.min.css";
import { marked } from 'marked';
import _ from 'lodash';
import { InboxOutlined } from '@ant-design/icons';
import { message, Upload, Image, Checkbox, Tabs, Spin } from 'antd';
import LazyLoad from 'react-lazy-load';
import { GifSelector } from "./gifSelector";
import { MediaSelector } from "./mediaSelector";
import { RedditUI } from "./redditUI";
import { Typewriter } from 'react-simple-typewriter'
import { MyCalendar } from "./calenderComponent";
import { AddPages } from "./addPageModal";
import axios from "axios";
const { TabPane } = Tabs;
const { Dragger } = Upload;

import {
    RedditCircleFilled,
    FileImageOutlined,
    FileGifOutlined,
    UserOutlined,
    LinkedinFilled,
    FileTextOutlined,
    SmileOutlined,
    ClockCircleOutlined,
    CaretDownOutlined,
    SendOutlined,
    UploadOutlined,
    EyeOutlined,
    EyeInvisibleOutlined,
    CloseCircleOutlined,
    CheckCircleOutlined,
} from '@ant-design/icons';

export function RenderOptions(props) {
    const [selectedGif, setSelectedGif] = useState(null);
    const [selectedMedia, setSelectedMedia] = useState(null);
    const [textOutput, setTextOutput] = useState('This is a test data generated by AI');
    const [loading, setLoading] = useState(false);
    const [loadingMsg, setLoadingMsg] = useState('Generating Text...');
    const [images, setImages] = useState([]);
    const [selectedFile, setSelectedFile] = useState(null);
    const inputRef = useRef();
    const [inputText, setInputText] = useState('');
    const editorRef = useRef(props.editorRef);

    const decodeUnicodeEscapeSequences = (str) => {
        return str.replace(/\\u([\dA-Fa-f]{4})/g, (_, hex) =>
            String.fromCodePoint(parseInt(hex, 16))
        );
    };

    const aiGenerator = async (key) => {
        let aiprompt = inputRef.current.value;
        if (key.keyCode != 13) {
            return;
        }
        if (aiprompt == null || aiprompt == '') {
            console.log('Prompt is empty');
            return;
        }
        setLoading(true);
        setLoadingMsg('Generating Text...');
        let response = await axios.post('http://localhost:3000/automate/gpt', {
            prompt: aiprompt
        });
        setLoading(false);
        console.log(response.data.response.response);
        // setTextOutput(response.data.response.response);
        let text = decodeUnicodeEscapeSequences(response.data.response.response)
        setTextOutput(text);
    }

    const handleGifSelect = (gif) => {
        console.log(gif);
        setSelectedGif(gif);
        props.onSelectGif({media:gif.images.original.url.split('?')[0], type:'url', mimeType:'gif'})
    };

    const handleMediaSelect = (media) => {
        console.log(media);
        setSelectedMedia(media);
        props.onSelectMedia({media:media, type:'url', mimeType:'image/video'})
    };

    const handleInputChange = (event) => {
        setInputText(event.target.value);
    };

    const handleClearClick = () => {
        setInputText('');
        inputRef.current.focus();
    };

    const handleFileChange = (event) => {
        const file = event.target.files[0];
        setSelectedFile(file);
        props.onImageSelect({media:file, type:'file', mimeType: 'file'});
    };

    const summarize = async () => {
        const editorInstance = props.editorRef.current;
        const text = editorInstance.value();
        console.log('Text inside the editor:', text);
        let aiprompt = "summarize the following text: " + "<" + text + ">";

        setLoading(true);
        setLoadingMsg('Summarizing Text...');
        let response = await axios.post('http://localhost:3000/automate/gpt', {
            prompt: aiprompt
        });
        setLoading(false);
        console.log(response.data.response.response);
        // setTextOutput(response.data.response.response);
        let outtext = decodeUnicodeEscapeSequences(response.data.response.response)
        setTextOutput(outtext);
    }

    const rephrase = async () => {
        const codemirror = props.editorRef.current.codemirror;
        const doc = codemirror.getDoc();

        if (doc.somethingSelected()) {
            const selection = doc.getSelection();
            console.log("Selected text:", selection);

            let aiprompt = "rephrase the following: " + "<" + selection + ">";

            setLoading(true);
            setLoadingMsg('Rephrasing Selected Text...');
            let response = await axios.post('http://localhost:3000/automate/gpt', {
                prompt: aiprompt
            });
            setLoading(false);
            console.log(response.data.response.response);
            // setTextOutput(response.data.response.response);
            let outtext = decodeUnicodeEscapeSequences(response.data.response.response)
            setTextOutput(outtext);

        } else {
            const editorInstance = props.editorRef.current;
            const text = editorInstance.value();
            console.log('Text inside the editor:', text);

            let aiprompt = "rephrase the following: " + "<" + text + ">";

            setLoading(true);
            setLoadingMsg('Rephrasing All Text...');
            let response = await axios.post('http://localhost:3000/automate/gpt', {
                prompt: aiprompt
            });
            setLoading(false);
            console.log(response.data.response.response);
            // setTextOutput(response.data.response.response);
            let outtext = decodeUnicodeEscapeSequences(response.data.response.response)
            setTextOutput(outtext);
        }
    }

    const hashtags = async () => {
        const editorInstance = props.editorRef.current;
        const text = editorInstance.value();
        console.log('Text inside the editor:', text);

        let aiprompt = "generate hashtags for the following (just return hashtags sperated by space): " + "<" + text + ">";

        setLoading(true);
        setLoadingMsg('Generating Hashtags...');
        let response = await axios.post('http://localhost:3000/automate/gpt', {
            prompt: aiprompt
        });
        setLoading(false);
        console.log(response.data.response.response);
        // setTextOutput(response.data.response.response);
        let outtext = decodeUnicodeEscapeSequences(response.data.response.response)
        setTextOutput("/n" + outtext);
    }

    const expand = async () => {
        const codemirror = props.editorRef.current.codemirror;
        const doc = codemirror.getDoc();

        if (doc.somethingSelected()) {
            const selection = doc.getSelection();
            console.log("Selected text:", selection);

            let aiprompt = "lengthen the following : " + "<" + selection + ">";

            setLoading(true);
            setLoadingMsg('Expanding Selected Text...');
            let response = await axios.post('http://localhost:3000/automate/gpt', {
                prompt: aiprompt
            });
            setLoading(false);
            console.log(response.data.response.response);
            // setTextOutput(response.data.response.response);
            let outtext = decodeUnicodeEscapeSequences(response.data.response.response)
            setTextOutput(outtext);

        } else {
            const editorInstance = props.editorRef.current;
            const text = editorInstance.value();
            console.log('Text inside the editor:', text);

            let aiprompt = "lengthen the following: " + "<" + text + ">";

            setLoading(true);
            setLoadingMsg('Expanding All Text...');
            let response = await axios.post('http://localhost:3000/automate/gpt', {
                prompt: aiprompt
            });
            setLoading(false);
            console.log(response.data.response.response);
            // setTextOutput(response.data.response.response);
            let outtext = decodeUnicodeEscapeSequences(response.data.response.response)
            setTextOutput(outtext);
        }
    }

    switch (props.selectedTab) {
        case "0":
            return (
                // Images / Videos
                <div className="flex flex-col gap-2 justify-center">
                    <p className="font-railway mr-auto mb-2">Add an Image or a Video</p>
                    <div className="flex items-center">
                        <label className="w-40 flex items-center px-4 py-2 bg-gray-200 text-gray-700 rounded-lg cursor-pointer">
                            <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="22" height="22" viewBox="0 0 50 50">
                                <path d="M 24.375 4 C 22.472656 4 20.699219 5.414063 19.9375 7.375 L 19.3125 9 L 14 9 L 14 8 C 14 7.449219 13.550781 7 13 7 L 6 7 C 5.449219 7 5 7.449219 5 8 L 5 9.40625 C 2.136719 10.285156 0 12.859375 0 16 L 0 37 C 0 40.855469 3.144531 44 7 44 L 43 44 C 46.855469 44 50 40.855469 50 37 L 50 16 C 50 12.144531 46.855469 9 43 9 L 40.6875 9 L 40.0625 7.375 C 39.300781 5.414063 37.53125 4 35.625 4 Z M 24.375 6 L 35.625 6 C 36.390625 6 37.710938 6.867188 38.1875 8.09375 L 39.0625 10.375 C 39.214844 10.757813 39.589844 11.003906 40 11 L 43 11 C 45.773438 11 48 13.226563 48 16 L 48 37 C 48 39.773438 45.773438 42 43 42 L 7 42 C 4.226563 42 2 39.773438 2 37 L 2 16 C 2 13.511719 3.792969 11.460938 6.15625 11.0625 C 6.636719 10.988281 6.992188 10.578125 7 10.09375 L 7 9 L 12 9 L 12 10 C 12 10.550781 12.449219 11 13 11 L 20 11 C 20.410156 11.003906 20.785156 10.757813 20.9375 10.375 L 21.8125 8.09375 C 22.289063 6.867188 23.609375 6 24.375 6 Z M 30 13 C 22.835938 13 17 18.835938 17 26 C 17 33.164063 22.835938 39 30 39 C 37.164063 39 43 33.164063 43 26 C 43 18.835938 37.164063 13 30 13 Z M 7 14 C 5.894531 14 5 14.894531 5 16 C 5 17.105469 5.894531 18 7 18 C 8.105469 18 9 17.105469 9 16 C 9 14.894531 8.105469 14 7 14 Z M 30 15 C 36.085938 15 41 19.914063 41 26 C 41 32.085938 36.085938 37 30 37 C 23.914063 37 19 32.085938 19 26 C 19 19.914063 23.914063 15 30 15 Z"></path>
                            </svg>
                            <span className="ml-2 text-base">Choose File</span>
                            <input
                                type="file"
                                className="hidden"
                                onChange={handleFileChange}
                                accept="image/*, video/*"
                            />
                        </label>
                        {selectedFile && (
                            <p className="ml-4 text-gray-600">Selected file: {selectedFile.name}</p>
                        )}
                    </div>
                </div>
            )

        case "1":
            return (
                // Media Library
                <div className="flex flex-col gap-2 justify-center">
                    <p className="font-railway mr-auto mb-2">Import from Media</p>
                    <Button danger onClick={() => setSelectedMedia('')} className="mb-2">Clear</Button>
                    {console.log("PROPS IMAGES: ", props.images)}
                    <MediaSelector data={props.images} onSelect={handleMediaSelect} />
                    {selectedMedia && (
                        <div className='flex justify-center align-middle items-center'>
                            <img width={200} height={200} src={selectedMedia} />
                        </div>
                    )}
                </div>
            )

        case "2":
            return (
                // Add Gif
                <div className="flex flex-col gap-2 justify-center">
                    <p className="font-railway mr-auto mb-2">Add a Gif</p>
                    <Button danger onClick={() => {setSelectedGif(''); props.onSelectGif('')}} className="mb-2">Clear</Button>
                    <GifSelector onSelect={handleGifSelect} />
                    {selectedGif && (
                        <div className='flex justify-center align-middle items-center'>
                            <img width={200} height={200} src={selectedGif.images.original.url} alt="Selected Gif" />
                        </div>
                    )}
                </div>
            )

        case "3":
            return (
                // AI
                <div>
                    <div className="flex gap-2 flex-wrap justify-center">
                        <div onClick={() => summarize()} className="rounded-full  pl-2 pr-2 border-dashed border-[1px] border-zinc-400 flex gap-1 items-center cursor-pointer group hover:border-[#d094ff]">
                            <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px"
                                width="15" height="15"
                                viewBox="0,0,256,256">
                                <g fill="#802ebe" fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-weight="none" font-size="none" text-anchor="none" ><g transform="scale(9.84615,9.84615)"><path d="M4,0c-1.09375,0 -2,0.90625 -2,2v22c0,1.09375 0.90625,2 2,2h18c1.09375,0 2,-0.90625 2,-2v-22c0,-1.09375 -0.90625,-2 -2,-2zM4,2h18v22h-18zM7,5c-0.55078,0 -1,0.44922 -1,1v1c0,0.55078 0.44922,1 1,1h11.96875c0.55078,0 1,-0.44922 1,-1v-1c0,-0.55078 -0.44922,-1 -1,-1zM6,11v2h10v-2zM18,11v2h2v-2zM6,15v2h6v-2zM18,15v2h2v-2zM6,19v2h8v-2zM18,19v2h2v-2z"></path></g></g>
                            </svg>
                            <p className="text-lg group-hover:text-[#a258da]">Summarize</p>
                        </div>

                        <div onClick={() => rephrase()} className="rounded-full  pl-2 pr-2 border-dashed border-[1px] border-zinc-400 flex gap-1 items-center cursor-pointer group hover:border-[#d094ff]">
                            <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px"
                                width="15" height="15"
                                viewBox="0,0,256,256">
                                <g fill="#802ebe" fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-weight="none" font-size="none" text-anchor="none" ><g transform="scale(10.66667,10.66667)"><path d="M2.5,0c-1.378,0 -2.5,1.121 -2.5,2.5v16c0,1.379 1.122,2.5 2.5,2.5h6.92969c0.277,0 0.5,-0.224 0.5,-0.5c0,-0.276 -0.224,-0.5 -0.5,-0.5h-6.92969c-0.827,0 -1.5,-0.673 -1.5,-1.5v-16c0,-0.827 0.673,-1.5 1.5,-1.5h12c0.827,0 1.5,0.673 1.5,1.5v9.32031c0,0.276 0.224,0.5 0.5,0.5c0.276,0 0.5,-0.224 0.5,-0.5v-9.32031c0,-1.379 -1.122,-2.5 -2.5,-2.5zM3.5,4c-0.276,0 -0.5,0.224 -0.5,0.5c0,0.276 0.224,0.5 0.5,0.5h5c0.276,0 0.5,-0.224 0.5,-0.5c0,-0.276 -0.224,-0.5 -0.5,-0.5zM3.5,8c-0.276,0 -0.5,0.224 -0.5,0.5c0,0.276 0.224,0.5 0.5,0.5h10c0.276,0 0.5,-0.224 0.5,-0.5c0,-0.276 -0.224,-0.5 -0.5,-0.5zM21.08594,11.41016c-0.38887,0 -0.77805,0.14083 -1.06055,0.42383l-7.7793,7.77734c-0.07,0.069 -0.11672,0.15786 -0.13672,0.25586l-0.70703,3.53516c-0.032,0.163 0.01872,0.33317 0.13672,0.45117c0.095,0.094 0.22447,0.14648 0.35547,0.14648c0.032,0 0.06466,-0.00377 0.09766,-0.00977l3.53516,-0.70703c0.096,-0.02 0.18391,-0.06672 0.25391,-0.13672l7.7793,-7.77734c0.585,-0.585 0.585,-1.53609 0,-2.12109l-1.41406,-1.41406c-0.283,-0.283 -0.67167,-0.42383 -1.06055,-0.42383zM3.5,12c-0.276,0 -0.5,0.224 -0.5,0.5c0,0.276 0.224,0.5 0.5,0.5h6c0.276,0 0.5,-0.224 0.5,-0.5c0,-0.276 -0.224,-0.5 -0.5,-0.5zM21.08398,12.39844c0.1295,0 0.26047,0.04612 0.35547,0.14062l1.41406,1.41406c0.195,0.195 0.195,0.51203 0,0.70703l-7.67187,7.67188l-2.65039,0.5293l0.5293,-2.65039l7.67188,-7.67188c0.094,-0.0945 0.22206,-0.14062 0.35156,-0.14062z"></path></g></g>
                            </svg>
                            <p className="text-lg group-hover:text-[#a258da]">Rephrase</p>
                        </div>

                        <div onClick={() => hashtags()} className="rounded-full  pl-2 pr-2 border-dashed border-[1px] border-zinc-400 flex gap-1 items-center cursor-pointer group hover:border-[#d094ff]">
                            <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px"
                                width="15" height="15"
                                viewBox="0,0,256,256">
                                <g fill="#802ebe" fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-weight="none" font-size="none" text-anchor="none" ><g transform="scale(5.12,5.12)"><path d="M13.59961,4c-4.73754,0 -8.59961,3.86206 -8.59961,8.59961v18.80078v7c0,4.73754 3.86206,8.59961 8.59961,8.59961h22.80078c4.73754,0 8.59961,-3.86207 8.59961,-8.59961v-7.80078v-18c0,-4.73754 -3.86207,-8.59961 -8.59961,-8.59961zM13.59961,6h22.80078c3.65646,0 6.59961,2.94315 6.59961,6.59961v18v0.80078c0,3.65646 -2.94315,6.59961 -6.59961,6.59961h-22.80078c-3.65645,0 -6.59961,-2.94315 -6.59961,-6.59961v-0.80078v-18c0,-3.65645 2.94315,-6.59961 6.59961,-6.59961zM20.95703,13l-0.33789,4h-3.76172l-0.10742,2h3.69922l-0.50586,6h-3.83594l-0.10742,2h3.77344l-0.33789,4h2.00586l0.33789,-4h6.0293l-0.33789,4h2.00781l0.33789,-4h3.32617l0.10742,-2h-3.26367l0.50586,-6h3.40039l0.10742,-2h-3.33789l0.33789,-4h-2.00781l-0.33789,4h-6.02734l0.33789,-4zM22.45703,19h6.02734l-0.50586,6h-6.0293zM7,36.90234c1.57946,1.89041 3.95257,3.09766 6.59961,3.09766h22.80078c2.64704,0 5.02015,-1.20724 6.59961,-3.09766v1.49805c0,3.65646 -2.94315,6.59961 -6.59961,6.59961h-22.80078c-3.65645,0 -6.59961,-2.94315 -6.59961,-6.59961z"></path></g></g>
                            </svg>
                            <p className="text-lg group-hover:text-[#a258da]">Add Hashtags</p>
                        </div>

                        <div onClick={() => expand()} className="rounded-full  pl-2 pr-2 border-dashed border-[1px] border-zinc-400 flex gap-1 items-center cursor-pointer group hover:border-[#d094ff]">
                            <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px"
                                width="15" height="15"
                                viewBox="0,0,256,256">
                                <g fill="#802ebe" fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-weight="none" font-size="none" text-anchor="none" ><g transform="scale(5.12,5.12)"><path d="M19.2793,4c-0.414,0 -0.78459,0.25462 -0.93359,0.64063l-14.2793,37c-0.119,0.308 -0.07662,0.65378 0.10938,0.92578c0.187,0.272 0.49422,0.43359 0.82422,0.43359h4.98242c0.42,0 0.79545,-0.26225 0.93945,-0.65625l3.76953,-10.34375h14.27148l0.91406,2.55078c0.393,-0.726 0.86639,-1.40144 1.40039,-2.02344l-0.66797,-1.86523c-0.143,-0.397 -0.51941,-0.66211 -0.94141,-0.66211h-15.67578c-0.42,0 -0.79545,0.26225 -0.93945,0.65625l-3.77148,10.34375h-2.82422l13.50781,-35h4.02148l9.5,24.5332c0.553,-0.382 1.14472,-0.71119 1.76172,-0.99219l-9.64453,-24.90234c-0.15,-0.385 -0.51864,-0.63867 -0.93164,-0.63867zM21.84766,8.45703c-0.42,0 -0.79545,0.2632 -0.93945,0.6582l-6.39648,17.54297c-0.112,0.307 -0.06591,0.64802 0.12109,0.91602c0.187,0.268 0.49236,0.42578 0.81836,0.42578h12.7832c0.325,0 0.63236,-0.15878 0.81836,-0.42578c0.188,-0.266 0.23205,-0.60611 0.12305,-0.91211l-6.28516,-17.54297c-0.142,-0.397 -0.51941,-0.66211 -0.94141,-0.66211zM21.89063,12.25586l4.92188,13.74414h-9.93164zM40,30c-5.511,0 -10,4.489 -10,10c0,5.511 4.489,10 10,10c5.511,0 10,-4.489 10,-10c0,-5.511 -4.489,-10 -10,-10zM40,32c4.43012,0 8,3.56988 8,8c0,4.43012 -3.56988,8 -8,8c-4.43012,0 -8,-3.56988 -8,-8c0,-4.43012 3.56988,-8 8,-8zM40,34.09961c-0.15,0 -0.28828,0.02539 -0.41016,0.07227c-0.12188,0.04688 -0.22695,0.11563 -0.31445,0.20313c-0.0875,0.0875 -0.15625,0.19453 -0.20312,0.31641c-0.04687,0.12188 -0.07227,0.2582 -0.07227,0.4082v3.90039h-3.90039c-0.15,0 -0.28633,0.02539 -0.4082,0.07227c-0.12188,0.04688 -0.22891,0.11563 -0.31641,0.20313c-0.0875,0.0875 -0.15625,0.19258 -0.20312,0.31445c-0.04687,0.12188 -0.07227,0.26016 -0.07227,0.41016c0,0.15 0.02539,0.28828 0.07227,0.41016c0.09375,0.24375 0.27578,0.42383 0.51953,0.51758c0.12188,0.04688 0.2582,0.07227 0.4082,0.07227h3.90039v3.90039c0,0.6 0.4,1 1,1c0.6,0 1,-0.4 1,-1v-3.90039h3.90039c0.6,0 1,-0.4 1,-1c0,-0.6 -0.4,-1 -1,-1h-3.90039v-3.90039c0,-0.6 -0.4,-1 -1,-1z"></path></g></g>
                            </svg>
                            <p className="text-lg group-hover:text-[#a258da]">Expand</p>
                        </div>
                    </div>

                    <div className="p-2 pt-3 flex">
                        <input
                            type="text"
                            className="w-full p-1 pl-3 text-lg rounded-lg border-[1px] border-purple-500 bg-purple-100 focus:outline-none focus:border-purple-600"
                            placeholder="✨ Describe what to write about..."
                            ref={inputRef}
                            value={inputText}
                            onChange={handleInputChange}
                            onKeyDown={aiGenerator}
                        />
                        {inputText && (
                            <button className="text-red-500 px-2 justify-center items-center " onClick={handleClearClick}>
                                <p className="text-md">x</p>
                            </button>
                        )}
                    </div>

                    {
                        loading ? (
                            <div className="flex justify-end pr-3 items-center gap-3 pb-2">
                                <p className="text-xs font-thin">{loadingMsg}</p>
                                <Spin size="small" />
                            </div>
                        ) : (
                            <></>
                        )
                    }

                    <div className="rounded-xl border-dashed border-[1px] border-[#c16fff] p-3">
                        {
                            textOutput ? (
                                <Typewriter key={textOutput} onLoopDone={console.log} typeSpeed={15} words={[textOutput]} />
                                // console.log("textOutput: ", textOutput)
                            ) : (
                                <></>
                            )
                        }
                        {/* <p className="text-lg">Step out of your comfort zone and onto the trails! Whether you're a beginner or a seasoned hiker, there's nothing quite like the feeling of conquering a mountain. Take in the breathtaking views, breathe in the fresh air and feel the burn in your legs as you climb higher and higher. Hiking is not just a physical activity, it's a mental escape from the hustle and bustle of everyday life. So grab your backpack, lace up your boots and let's hit the trails! From peaceful forest paths to challenging peaks, there's a hike out there for everyone. So what are you waiting for? Let's explore the great outdoors and discover the beauty that nature has to offer. #hikingadventures #naturelover #getoutdoors #hikingtrail #mountainclimbing #adventureawaits #explore #tiktokhiking</p> */}
                    </div>
                    <div className="flex justify-end gap-3 pt-1">
                        <p onClick={() => aiGenerator()} className="text-[15px] text-purple-600 cursor-pointer hover:text-purple-800">Retry</p>
                        <div onClick={() => props.addText(textOutput)} className="flex rounded-sm pl-1 pr-1 justify-center cursor-pointer items-center bg-purple-600 gap-1">
                            <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px"
                                width="15" height="15"
                                viewBox="0,0,256,256">
                                <g fill="#ffffff" fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-weight="none" font-size="none" text-anchor="none" ><g transform="scale(5.12,5.12)"><path d="M42.875,8.625c-0.03125,0.00781 -0.0625,0.01953 -0.09375,0.03125c-0.26172,0.06641 -0.48828,0.23438 -0.625,0.46875l-20.4375,31.6875l-14.0625,-12.6875c-0.24609,-0.3125 -0.65625,-0.44922 -1.04297,-0.34766c-0.38672,0.10156 -0.67187,0.42578 -0.73047,0.82031c-0.05859,0.39453 0.12109,0.78516 0.46094,0.99609l14.90625,13.5c0.21875,0.19141 0.51172,0.27734 0.80078,0.23438c0.28906,-0.04297 0.54297,-0.20703 0.69922,-0.45312l21.09375,-32.6875c0.23047,-0.32812 0.24219,-0.76172 0.03125,-1.10156c-0.21094,-0.33984 -0.60547,-0.51953 -1,-0.46094z"></path></g></g>
                            </svg>
                            <p className="text-white">Insert</p>
                        </div>
                    </div>
                </div >
            )

        default:
            return (
                <div className="flex gap-2 items-center">
                    <p>Default</p>
                </div>
            )
    }
};